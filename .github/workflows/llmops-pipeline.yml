name: End-to-End LLMOps Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-scan-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: fastapi-app
      DOCKER_USER: yujieooi2000
      DOCKER_TAG: latest
      DEPLOYMENT_FILE: k8s/deployment.yaml
      SERVICE_FILE: k8s/service.yaml
      INGRESS_FILE: k8s/ingress.yaml
      CLUSTER_NAME: my-cluster   # 🔹 change if your cluster name differs

    steps:
      # 1️⃣ Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3️⃣ Log in to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Free disk space (GitHub-hosted runner)
        run: |
          echo "Before cleanup:" && df -h
          docker system prune -af || true
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/lib/android /opt/hostedtoolcache || true
          echo "After cleanup:" && df -h


      # 4️⃣ Build Docker image
      - name: Build Docker image (load into local Docker)
        run: |
          docker buildx build --platform linux/amd64 \
            -t $DOCKER_USER/$IMAGE_NAME:$DOCKER_TAG \
            -f src/Dockerfile src/ \
            --load
          docker images

      # 5️⃣ Free up disk space before scan
      - name: Free disk space
        run: |
          echo "Before cleanup:" && df -h
          docker system prune -af || true
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/lib/android || true
          echo "After cleanup:" && df -h

      # 6️⃣ Run Trivy security scan
      - name: Security scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_USER }}/${{ env.IMAGE_NAME }}:${{ env.DOCKER_TAG }}
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          format: table
          scanners: vuln
          skip-version-check: true
          vuln-type: os,library
          cache-dir: /tmp/trivy-cache

      # 7️⃣ Push image to Docker Hub
      - name: Push Docker image
        run: |
          docker tag $IMAGE_NAME:$DOCKER_TAG $DOCKER_USER/$IMAGE_NAME:$DOCKER_TAG
          docker push $DOCKER_USER/$IMAGE_NAME:$DOCKER_TAG

      # 8️⃣ Install kubectl
      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      # 9️⃣ Install & authenticate doctl (DigitalOcean CLI)
      - name: Install doctl
        run: | 
          sudo snap install doctl --classic || true 
          doctl version

      - name: Authenticate with DigitalOcean
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        run: doctl auth init -t $DIGITALOCEAN_ACCESS_TOKEN

      # 🔹 Fetch live kubeconfig (recommended method)
      - name: Configure kubeconfig from DigitalOcean
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        run: |
          mkdir -p $HOME/.kube
          doctl kubernetes cluster kubeconfig save $CLUSTER_NAME --expiry-seconds 600
          export KUBECONFIG=$HOME/.kube/config
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV
          kubectl config current-context

      # 🔹 Deploy to Kubernetes (disable validation to avoid openapi issues)
      - name: Deploy to Kubernetes
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          KUBECONFIG: ${{ env.KUBECONFIG }}
        run: |
          kubectl apply -f $DEPLOYMENT_FILE --validate=false
          kubectl apply -f $SERVICE_FILE --validate=false
          kubectl apply -f $INGRESS_FILE --validate=false
